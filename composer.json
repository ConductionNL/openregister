{
	"name": "conductionnl/openregister",
	"description": "Quickly build data registers based on schema.json",
	"license": "AGPL-3.0-or-later",
	"authors": [
		{
			"name": "Conduction b.v.",
			"email": "info@conduction.nl",
			"homepage": "https://conduction.nl"
		}
	],
	"autoload": {
		"psr-4": {
			"OCA\\OpenRegister\\": "lib/"
		}
	},
	"scripts": {
		"post-install-cmd": [
			"@composer bin all install --ansi"
		],
		"post-update-cmd": [
			"@composer bin all update --ansi"
		],
		"lint": "find . -name \\*.php -not -path './vendor/*' -not -path './vendor-bin/*' -not -path './build/*' -print0 | xargs -0 -n1 php -l",
		"cs:check": "./vendor/bin/phpcs --standard=phpcs.xml",
		"cs:fix": "./vendor/bin/phpcbf --standard=phpcs.xml",
		"phpcs": "./vendor/bin/phpcs --standard=phpcs.xml",
		"phpcs:fix": "./vendor/bin/phpcbf --standard=phpcs.xml",
		"psalm": "psalm --threads=1 --no-cache || echo 'Psalm not installed, skipping...'",
		"phpmd": "phpmd lib text phpmd.xml || echo 'PHPMD not installed, skipping...'",
		"test:unit": "./vendor/bin/phpunit --testsuite=\"Unit Tests\" --colors=always || echo 'Tests require Nextcloud environment, skipping...'",
		"test:integration": "./vendor/bin/phpunit --testsuite=\"Integration Tests\" --colors=always || echo 'Tests require Nextcloud environment, skipping...'",
		"test:db": "./vendor/bin/phpunit --testsuite=\"Database Tests\" --colors=always || echo 'Tests require Nextcloud environment, skipping...'",
		"test:service": "./vendor/bin/phpunit --testsuite=\"Service Tests\" --colors=always || echo 'Tests require Nextcloud environment, skipping...'",
		"test:all": "./vendor/bin/phpunit --colors=always || echo 'Tests require Nextcloud environment, skipping...'",
		"test:docker": "docker exec -u 33 master-nextcloud-1 bash -c 'cd /var/www/html/apps-extra/openregister && ./vendor/bin/phpunit --colors=always'",
		"test:api": "docker exec -u 33 master-nextcloud-1 bash -c 'cd /var/www/html/apps-extra/openregister && ./vendor/bin/phpunit --testsuite=\"Integration Tests\" --colors=always'",
		"test:coverage": "./vendor/bin/phpunit --coverage-html=coverage/html --coverage-clover=coverage/clover.xml --colors=always",
		"test:coverage-docker": "docker exec -u 33 master-nextcloud-1 bash -c 'cd /var/www/html/apps-extra/openregister && ./vendor/bin/phpunit --coverage-html=coverage/html --coverage-clover=coverage/clover.xml --colors=always'",
		"coverage:check": "php -r \"\\$xml = simplexml_load_file('coverage/clover.xml'); \\$metrics = \\$xml->project->metrics; \\$statements = (int)\\$metrics['statements']; \\$covered = (int)\\$metrics['coveredstatements']; \\$percentage = \\$statements > 0 ? round((\\$covered / \\$statements) * 100, 2) : 0; echo 'Coverage: ' . \\$percentage . '%' . PHP_EOL; exit(\\$percentage < 75 ? 1 : 0);\"",
		"quality:phpcs-score": "./vendor/bin/phpcs --standard=phpcs.xml --report=json lib/ | php -r \"\\$json = json_decode(file_get_contents('php://stdin'), true); \\$errors = \\$json['totals']['errors'] ?? 0; \\$warnings = \\$json['totals']['warnings'] ?? 0; \\$score = 1000 - \\$errors - (\\$warnings / 2); echo 'PHPCS Score: ' . \\$score . ' (Errors: ' . \\$errors . ', Warnings: ' . \\$warnings . ')' . PHP_EOL;\"",
		"quality:phpmd-score": "phpmd lib/ json phpmd.xml | php -r \"\\$input = file_get_contents('php://stdin'); \\$json = json_decode(\\$input, true); \\$violations = count(\\$json['files'] ?? []); \\$score = 1000 - (\\$violations * 10); echo 'PHPMD Score: ' . \\$score . ' (Violations: ' . \\$violations . ')' . PHP_EOL;\" || echo 'PHPMD not available'",
		"quality:psalm-score": "psalm --output-format=json --no-cache | php -r \"\\$input = file_get_contents('php://stdin'); \\$json = json_decode(\\$input, true); \\$errors = count(\\$json ?? []); \\$score = 1000 - (\\$errors * 5); echo 'Psalm Score: ' . \\$score . ' (Errors: ' . \\$errors . ')' . PHP_EOL;\" || echo 'Psalm not available'",
		"quality:score": [
			"@quality:phpcs-score",
			"@quality:phpmd-score", 
			"@quality:psalm-score"
		],
		"quality:baseline": "php scripts/quality-baseline.php",
		"openapi": "generate-spec",
		"check": [
			"@lint",
			"@psalm",
			"@test:unit"
		],
		"check:full": [
			"@lint",
			"@psalm",
			"@test:all"
		],
		"check:strict": [
			"@lint",
			"@phpcs",
			"@phpmd",
			"@psalm",
			"@test:all"
		],
		"fix": [
			"@cs:fix"
		]
	},
	"require": {
		"php": "^8.1",
		"adbario/php-dot-notation": "^3.3.0",
		"bamarni/composer-bin-plugin": "^1.8",
		"elasticsearch/elasticsearch": "^v8.14.0",
		"guzzlehttp/guzzle": "^7.0",
		"opis/json-schema": "^2.3",
		"phpoffice/phpspreadsheet": "^4.2",
		"react/async": "^4.3",
		"react/event-loop": "^1.5",
		"react/promise": "^3.2",
		"symfony/uid": "^6.4",
		"symfony/yaml": "^6.4",
		"twig/twig": "^3.18"
	},
	"require-dev": {
		"nextcloud/ocp": "dev-stable29",
		"phpcsstandards/phpcsextra": "^1.4",
		"phpmd/phpmd": "^2.15",
		"phpunit/phpunit": "^10.5",
		"roave/security-advisories": "dev-latest",
		"squizlabs/php_codesniffer": "^3.9",
		"vimeo/psalm": "^0.3.14"
	},
	"config": {
		"allow-plugins": {
			"bamarni/composer-bin-plugin": true,
			"php-http/discovery": true,
			"dealerdirect/phpcodesniffer-composer-installer": true
		},
		"optimize-autoloader": true,
		"sort-packages": true,
		"platform": {
			"php": "8.1"
		}
	}
}
